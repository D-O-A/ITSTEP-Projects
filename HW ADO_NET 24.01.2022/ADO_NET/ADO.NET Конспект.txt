Технология доступа к данным ADO.NET

Средства языка программирования, позволяющие:
- передавать запросы к БД (СУБД)
- принимать и обрабатывать результаты запросов
= унифицировать средства, делать независимыми от СУБД

1. БД и подключение

1.1 Создаем БД (если нет)
1.2 Узнаем connection string (из свойства БД / СУБД)
Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Users\vladislav.yavorskiy\OneDrive\Документы\ШАГ\ADO_NET\ADO_NET\ADO_NET\Database2.mdf;Integrated Security=True
1.3 Устанавливаем пакет NuGet (System.Data.SqlClient)
1.4 using System.Data.SqlClient;
1.5 Создаем объект-подключение
var connection = new SqlConnection(//connection string);
! В ADO создание объекта НЕ открывает подключение автоматически
1.6 Открываем подключение в блоке try-catch

2. Выполнение запросов

2.0 Требуется открытое подключение (см. п.1)
2.1 Для запросов используется SqlCommand
		поле CommandText содержит текст запроса
2.2 Выполнение команды: зависит от DDL / DML 
		ExecuteNonQuery() - запросы без возврата
		ExecuteScalar() - с возвратом одного значения  //тема микромягких
		ExecuteReader() - с возвратом таблицы
	Рекомендуется:
		закрывать команды после выполнения (использовать блок using(){})

	// !!! команда отправляет запрос и забирает ответ

------------------------------------------------------------

DB									DB
 DBMS								 DBMS
|   | Console (SQL) Query			     ADO
| Console (Result) Table				   Program

------------------------------------------------------------

2.2 Прожолжение
	ExecuteReader() - с возвратом результата
	SqlDataReader result = cmd.ExecuteReader();

	result - объект, отвечающих за передачу данных из СУБД в программу.
	Поскольку в СУБД данные в табличном виде, а в языке программирования подходящих типов данных нет, то передача происходит по следующему принципу:

	1. Запрашивается одна строка таблицы (ROW), (Read/Next/Fetch)
	2. Данные из этой строки "загружаются" в сам result и извлекаются из него при помощи Get-теров
	3. Повторяются пп.1-2 пока есть строки для загрузки
	4. Закрывают result, т.к. он "занимает" подключение и другие команды не могут выполняться

Особенности
Get-теры могут обращаться как по индексу, так и по имени
- Если поля не именуются, то лучше по индексу
- Желательно перечислять поля (не использовать "*")

Get-теры есть типизированные (GetString, GetDouble, GetGuid...)
и обобщенный (GetValue типа object).
Рекомендуется использовать типизированные

Проблема NULL:
В C# не все типы допускают NULL, а в БД - все. Решения есть:
- Nullable<T> - шаблон, добавляющий NULL к множеству T
- Каскадный get-тер: 
	сначала GetValue, проверяем, или это NULL, затем типизированный get-тер или конвертер

------------------------------------------------------------

ORM (Object Reflection Mapping) - Отображение на объекты

Для ООП языков данные из табоиц представляются в виде объектов одного класса
// Model - поставщик данных







								